import asyncio
from curses.ascii import isdigit

from aiogram import Bot, types, Router, F

from source.services.service_update_chat import ServiceUpdateChat


class GameStoriesHandler:
    def __init__(self,
                 bot: Bot,
                 router: Router,
                 chat_id: int,
                 service_update_chat: ServiceUpdateChat):
        self.bot = bot
        self.router = router
        self.chat_id = chat_id
        self.service_update_chat = service_update_chat
        self.players = {}

    async def recruitment(self, start_player_msg: types.Message):
        queue = asyncio.Queue()
        self.players = {
            start_player_msg.from_user.id: start_player_msg.from_user.first_name
        }

        async def get_message_in_queue(message: types.Message) -> None:
            await queue.put(message)

        async def handle_message():
            while True:
                message = await queue.get()
                words = message.text.lower().split()
                if words[0] in ('–≤—Å—Ç—É–ø–∏—Ç—å', '–∏–≥—Ä–∞—Ç—å', '–≤–æ–π—Ç–∏', '–∑–∞–π—Ç–∏') or \
                        message.text.lower() == "–∏–≥—Ä–∞ —Ö–æ—á—É –∏–≥—Ä–∞—Ç":

                    if message.from_user.id in self.players:
                        answer = "—Ç—ã —É–∂–µ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö!"
                    else:
                        self.players[message.from_user.id] = message.from_user.first_name
                        answer = "—Ç—ã –≤—Å—Ç—É–ø–∏–ª –≤ –∏–≥—Ä—É!"

                    await message.reply(answer)

                elif words[0] in ("–∏–≥—Ä–æ–∫–∏", "—É—á–∞—Å—Ç–Ω–∏–∫–∏", "–æ—Ç—Ä—è–¥"):
                    if len(self.players) < 1:
                        answer = "–∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç!"
                    else:
                        answer = "–≤ –æ—Ç—Ä—è–¥–µ:\n"
                        for player_id, username in self.players.items():
                            answer += f"{username}; "
                    await message.reply(answer)
                elif words[0] in ('–Ω–∞—á–∞—Ç—å', "–≤–ø–∏—Ä—ë–¥!"):
                    if message.from_user.id == start_player_msg.from_user.id:
                        queue.task_done()
                        return
                    else:
                        await self.bot.send_message(self.chat_id, "—Ç–∏ –Ω–µ –º–æ–∂–µ—à –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!üò°")

                queue.task_done()

        self.router.message.register(get_message_in_queue, F.chat.id == self.chat_id)
        try:
            await asyncio.wait_for(handle_message(), timeout=30)
            await self.bot.send_message(self.chat_id, "—Ç–∏ —Å–º–æ–≥ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")
        except asyncio.TimeoutError:
            await self.bot.send_message(self.chat_id, "–≤—Ä–µ–º—è –≤—ã—à–ª–æ –∏ –≤—Å—ë —Ç–æ–∫–æ–µ")
        finally:
            self.router.message.handlers.pop()
            await self.bot.send_message(self.chat_id, "–∏–≥—Ä–æ–µ–º")

        return self.players

    async def ask_question(self):
        queue = asyncio.Queue()
        async def get_message_in_queue(message: types.Message) -> None:
            await queue.put(message)

        async def get_answer():
            await queue.get()
            queue.task_done()

        await self.bot.send_message(self.chat_id, "–ø—Ä–æ–∑–≤—É—á–∞–ª –≤–æ–ø—Ä–æ—Å")
        await asyncio.sleep(3.5)
        await self.bot.send_message(self.chat_id, "—Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å")
        await asyncio.sleep(1.5)
        for player_id, username in self.players.items():
            await self.bot.send_message(self.chat_id, f"–æ—Ç–≤–µ—á–∞–µ—Ç {username} (30 —Å–µ–∫.)")
            self.router.message.register(get_message_in_queue, F.from_user.id == player_id)
            try:
                await asyncio.wait_for(get_answer(), timeout=30)
                await self.bot.send_message(self.chat_id, "–æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç")
            except asyncio.TimeoutError:
                await self.bot.send_message(self.chat_id, "–≤—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –≤—ã—à–ª–æ –∏ –≤—Å—ë —Ç–æ–∫–æ–µ")
            finally:
                self.router.message.handlers.pop()
                await asyncio.sleep(1.5)
                continue

    async def voting_to_kick(self):
        queue = asyncio.Queue()
        async def get_message_in_queue(message: types.Message) -> None:
            await queue.put(message)

        async def voting():
            while True:
                message = await queue.get()
                if not message.text.isdigit() or int(message.text) > len(votes):
                    queue.task_done()
                    continue
                votes[int(message.text) - 1][1] += 1
                break


        list_to_vote = "–≤ –ø–∞–ª–∞—Ç—É –∑–∞—à—ë–ª –≥–ª–∞–≤. –≤—Ä–∞—á! —à–∏–∑–æ–∏–¥–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–≥–æ –µ–º—É –æ—Ç–¥–∞—Ç—å (20 —Å–µ–∫.):\n"
        votes = []
        for index, (player_id, username) in enumerate(self.players.items()):
            list_to_vote += f"{index + 1}. {username}\n"
            votes.append([player_id, 0])
        await self.bot.send_message(self.chat_id, list_to_vote)

        self.router.message.register(get_message_in_queue, F.chat.id == self.chat_id)
        try:
            await asyncio.wait_for(voting(), timeout=20)
            await self.bot.send_message(self.chat_id, "–≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
        except asyncio.TimeoutError:
            await self.bot.send_message(self.chat_id, "–≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã—à–ª–æ, –≥–ª–∞–≤. –≤—Ä–∞—á —Ç–µ—Ä—è–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏–µ")
        finally:
            self.router.message.handlers.pop()
            await asyncio.sleep(2)

            results = "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            for index, (player_id, votes_int) in enumerate(votes):
                results += f"{index + 1}. {self.players[player_id]}: {votes_int }\n"
            await self.bot.send_message(self.chat_id, results)
            await self.bot.send_message(self.chat_id, "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ")


    async def play(self, start_player_msg: types.Message):
        players = await self.recruitment(start_player_msg)

        if len(players) < 1:
            message = "–Ω–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å 4 —á–µ–ª–æ–≤–µ–∫–∞, –∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!"
            await self.bot.send_message(self.chat_id, message)
            await self.service_update_chat.update_status(self.chat_id, "default")
            return

        while True:
            await self.ask_question()

            # if len(self.players) < 4:
            #     break

            await self.voting_to_kick()
